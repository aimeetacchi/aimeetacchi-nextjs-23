import Head from 'next/head'
import { gql } from 'graphql-request';

import graphQLClient from '../graphql-client';
import { HomeStyle } from '../styles/styles';

import Layout from '../src/components/Layout';
import { Oswald } from '@next/font/google'
import Project from '../src/components/Project';

const inter = Oswald({ subsets: ['latin'] })

interface ProjectsProps {
  allProjects: [];
}

export default function Home({ allProjects } : ProjectsProps) {
  console.log('allProjects', allProjects);
  return (
    <>
      <Head>
        <title>Aimee Tacchi Portfolio 2023</title>
        <meta name="description" content="Aimee Tacchi Portfolio 2023 Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Layout>
      <HomeStyle>
        <div className="home-intro">
          <h2 className={`home-title ${inter.className}`}>React Developer</h2>
          <p className={inter.className}>Hello I&rsquo;m Aimee, I build responsive websites &amp; applications</p>
          
        </div>
        
        <div className="flex-container">
            {
              allProjects && allProjects.map((project: any) => (
                project.recentWork ?
                  <Project key={project.id} project={project} /> : null
                
              ))
            }
          </div>
      </HomeStyle>
      </Layout>
    </>
  )
}



const query = gql`
    query {
        allProjects {
            id
            name
            slug
            description
            excerpt
            link
            tech
            recentWork
            coverImage {
                id
                responsiveImage(imgixParams: { fit: crop, w: 300, h: 300, auto: format }) {
                    srcSet
                    webpSrcSet
                    sizes
                    src
                    width
                    height
                    aspectRatio
                    alt
                    title
                    base64
                }
            }
        }
    }
`;

export async function getStaticProps() {

    const allProjects = await graphQLClient.request(query);

    return {
        props: allProjects,
    };
}
